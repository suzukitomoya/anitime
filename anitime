#!/usr/bin/env php
<?php
/**
 * AniTime
 *
 * しょぼいカレンダーAPIから放送情報を取得して表示する。
 * 表示する局や放送時間など設定できるようにするつもり。
 *
 * [options]
 * --force, -f: キャッシュを破棄して番組を再取得する
 */

(new AniTime())->render();

class AniTime {
    const API               = 'http://cal.syoboi.jp/rss2.php?alt=json';
    const CACHE_FILE_FORMAT = '/tmp/anitime_%s.json';

    private $programs    = null;
    private $today       = null;
    private $timeStartHi = '2000';
    private $timeEndH    = '4';
    private $rule        = [
        'ChID'  => [],
        'ChGID' => [],
        'Cat'   => [],
    ];

    /**
     * オプションの判断と設定読み込み
     */
    public function __construct() {
        $opt = getopt('fh', ['force', 'help']);
        $configPath = self::getHomeDir().'/config.json';
        // キャッシュの破棄
        if (isset($opt['f']) || isset($opt['force'])) {
            array_map('unlink', glob(sprintf(self::CACHE_FILE_FORMAT, '*')));
        }
        // ヘルプ表示
        if (isset($opt['h']) || isset($opt['help'])) {
            // TODO: 使用方法、オプション
            echo 'しょぼいカレンダーAPIから放送情報を取得して表示します。'.PHP_EOL;
            exit;
        }

        $this->today = (new DateTime())->setTimezone(new DateTimeZone('Asia/Tokyo'));
        // 設定ファイル読み込み
        if (file_exists($configPath)) {
            $this->setConfig(json_decode(file_get_contents($configPath), true));
        }
    }

    /**
     * 番組データを取得して表示する
     */
    public function render() {
        // 番組データの取得
        $this->setPrograms();

        // 表示番組の絞り込みと表示整形
        if (!empty($this->programs)) {
            $programs = [];
            $timezone = new DateTimeZone('Asia/Tokyo');
            foreach ($this->programs->items as $program) {
                if ($this->validate($program)) {
                    $programs[] = [
                        'title'   => $program->Title,
                        'date'    => (new DateTime('@'.$program->StTime))->setTimezone($timezone)->format('m/d H:i'),
                        'channel' => $program->ChName,
                    ];
                }
            }
            if (!empty($programs)) {
                foreach ($programs as $program) {
                    echo "{$program['date']} => {$program['title']}({$program['channel']})".PHP_EOL;
                }
                return;
            }
        }
        echo '放送予定の番組はありません。'.PHP_EOL;
        return;
    }

    /**
     * 番組データの取得
     */
    private function setPrograms() {
        // キャッシュ読み込み
        $cachefile = sprintf(self::CACHE_FILE_FORMAT, $this->today->format('Ymd'));
        if (file_exists($cachefile)) {
            $this->programs = json_decode(file_get_contents($cachefile));
        } else {
            // キャッシュが無ければAPIアクセスしてキャッシュする
            $d = clone $this->today;
            $startDate = $d->format('Ymd'.$this->timeStartHi);
            $endDate   = $d->modify('+1 days')->setTime($this->timeEndH, 59)->format('Ymdhi');

            $json = self::getJson(self::API.sprintf('&start=%s&end=%s', $startDate, $endDate));
            file_put_contents(sprintf(self::CACHE_FILE_FORMAT, $this->today->format('Ymd')), $json);
            $this->programs = json_decode($json);
        }
    }

    /**
     * 読み込んだ設定をチェックしてプロパティに保存する
     * @param array $config 設定ファイルから読み込んだデータ
     */
    private function setConfig($config) {
        try {
            if (!empty($config['timeStartHi'])) {
                if (strlen($config['timeStartHi']) != 4 || strtotime($config['timeStartHi'].'00') === false) {
                    throw new Exception('[timeStartHi]: timeStartHiはHi形式で指定してください');
                }
                $this->timeStartHi = $config['timeStartHi'];
            }
            if (!empty($config['timeEndH'])) {
                if (preg_match('/^[1-9]|1[0-9]|2[0-4]$/', $config['timeEndH'] === 0)) {
                    throw new Exception('[timeEndH]: timeEndHはH形式で指定してください');
                }
                $this->timeEndH = $config['timeEndH'];
            }

            $idCheck = function($ids, $rule) {
                if (!is_array($ids)) {
                    throw new Exception("[{$rule}]: 配列形式で指定してください。");
                }
                $ids = array_map(function($id) {
                    if (!is_numeric($id)) {
                        throw new Exception("[{$rule}]: IDは数値形式で指定してください。");
                    }
                    return (string)$id;
                }, $ids);
                $this->rule[$rule] = $ids;
            };
            if (!empty($config['ChGID'])) {
                $idCheck($config['ChGID'], 'ChGID');
            }
            if (!empty($config['ChID'])) {
                $idCheck($config['ChID'], 'ChID');
            }
            if (!empty($config['Cat'])) {
                $idCheck($config['Cat'], 'Cat');
            }
        } catch (Exception $e) {
            echo 'ConfigError'.$e->getMessage().PHP_EOL;
            exit;
        }
        return true;
    }

    /**
     * 設定による番組の絞り込み
     * @param  object $program 番組データ
     * @return bool            絞り込みの結果（表示に含める場合はtrue）
     */
    private function validate($program) {
        $isValid = true;
        foreach ($this->rule as $rule => $val) {
            foreach ($val as $v) {
                if ($program->{$rule} === $v) {
                    $isValid = true;
                    break;
                }
                $isValid = false;
            }
            if (!$isValid) {
                return false;
            }
        }
        return true;
    }

    /**
     * APIアクセス
     */
    private static function getJson(string $url) {
        $ch = curl_init($url);

        curl_setopt_array($ch, [
            CURLOPT_CUSTOMREQUEST  => 'GET',
            CURLOPT_SSL_VERIFYPEER => false,
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_FAILONERROR    => true,
            // CURLOPT_USERAGENT      => '',
        ]);

        try {
            if (!$json = curl_exec($ch)) {
                throw new Exception(curl_error($ch));
            }
        } catch(Exception $e) {
            echo $e->getFile().':'.$e->getLine().' '.$e->getMessage()."\n";
            exit;
        }

        return $json;
    }

    /**
     * ホームディレクトリの取得
     * @return string ホームディレクトリ配下の設定ファイル保存先パス
     */
    private static function getHomeDir() {
        try {
            if (!getenv('HOME')) {
                throw new Exception('設定ファイルを読み込めませんでした。環境変数HOMEを設定してください。');
            }
        } catch (Exception $e) {
            echo 'PathError: '.$e->getMessage().PHP_EOL;
            exit;
        }
        return rtrim(getenv('HOME'), '/') . '/.anitime';
    }
}